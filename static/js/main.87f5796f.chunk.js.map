{"version":3,"sources":["Model.js","modelConfigs.js","App.js","serviceWorker.js","index.js"],"names":["Model","_Component","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","detector","togglingModel","predicting","progress","progressMessage","toggleModel","bind","assertThisInitialized","detect","progressCallback","inherits","createClass","key","value","_detect","asyncToGenerator","regenerator_default","a","mark","_callee","detections","wrap","_context","prev","next","setState","imageRef","current","sent","predictionCallback","stop","apply","arguments","_toggleModel","_callee2","_context2","dispose","load","modelConfig","modelUrl","classes","preprocessingMode","react_default","createElement","style","border","margin","padding","displayName","width","marginRight","backgroundColor","variant","disabled","onClick","concat","modelSize","marginLeft","marginTop","es","percent","strokeWidth","strokeColor","textAlign","description","Component","modelConfigs","backboneName","color","App","React","createRef","image","annotationGroups","handleFile","handlePredictions","index","anns","evt","URL","createObjectURL","target","files","_this2","href","map","Model_Model","type","onChange","id","position","ref","src","alt","annotationGroup","groupIndex","annotation","annotationIndex","x2","x1","height","y2","y1","left","top","fontWeight","label","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8ZAMaA,EAAb,SAAAC,GACI,SAAAD,EAAYE,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAN,IACfG,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAJ,GAAAS,KAAAH,KAAMJ,KACDQ,MAAQ,CACTC,SAAU,KACVC,eAAe,EACfC,YAAY,EACZC,SAAU,KACVC,gBAAiB,IAErBZ,EAAKa,YAAcb,EAAKa,YAAYC,KAAjBb,OAAAc,EAAA,EAAAd,CAAAD,IACnBA,EAAKgB,OAAShB,EAAKgB,OAAOF,KAAZb,OAAAc,EAAA,EAAAd,CAAAD,IACdA,EAAKiB,iBAAmBjB,EAAKiB,iBAAiBH,KAAtBb,OAAAc,EAAA,EAAAd,CAAAD,IAXTA,EADvB,OAAAC,OAAAiB,EAAA,EAAAjB,CAAAJ,EAAAC,GAAAG,OAAAkB,EAAA,EAAAlB,CAAAJ,EAAA,EAAAuB,IAAA,SAAAC,MAAA,eAAAC,EAAArB,OAAAsB,EAAA,EAAAtB,CAAAuB,EAAAC,EAAAC,KAAA,SAAAC,IAAA,IAAAC,EAAA,OAAAJ,EAAAC,EAAAI,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAgBQ7B,KAAK8B,SAAS,CAAEvB,YAAY,IAhBpCoB,EAAAE,KAAA,EAqBiC7B,KAAKI,MAAMC,SAASQ,OAAOb,KAAKJ,MAAMmC,SAASC,QAAS,IArBzF,OAqBcP,EArBdE,EAAAM,KA0BQjC,KAAK8B,SAAS,CAAEvB,YAAY,IAC5BP,KAAKJ,MAAMsC,mBAAmBT,GA3BtC,wBAAAE,EAAAQ,SAAAX,EAAAxB,SAAA,yBAAAmB,EAAAiB,MAAApC,KAAAqC,YAAA,KAAApB,IAAA,mBAAAC,MAAA,SA8BqBV,EAAUC,GACvBT,KAAK8B,SAAS,CAAEtB,WAAUC,sBA/BlC,CAAAQ,IAAA,cAAAC,MAAA,eAAAoB,EAAAxC,OAAAsB,EAAA,EAAAtB,CAAAuB,EAAAC,EAAAC,KAAA,SAAAgB,IAAA,IAAAlC,EAAA,OAAAgB,EAAAC,EAAAI,KAAA,SAAAc,GAAA,cAAAA,EAAAZ,KAAAY,EAAAX,MAAA,UAmCQ7B,KAAK8B,SAAS,CAAExB,eAAe,KAE3BN,KAAKI,MAAMC,SArCvB,CAAAmC,EAAAX,KAAA,QAsCY7B,KAAKI,MAAMC,SAASoC,UACpBpC,EAAW,KAvCvBmC,EAAAX,KAAA,sBAAAW,EAAAX,KAAA,EAyC6Ba,YACb1C,KAAKJ,MAAM+C,YAAYC,SACvB5C,KAAKJ,MAAM+C,YAAYE,QACvB7C,KAAKJ,MAAM+C,YAAYG,kBACvB9C,KAAKc,kBA7CrB,OAyCYT,EAzCZmC,EAAAP,KAAA,OAgDQjC,KAAK8B,SAAS,CAAEzB,WAAUC,eAAe,IAhDjD,yBAAAkC,EAAAL,SAAAI,EAAAvC,SAAA,yBAAAsC,EAAAF,MAAApC,KAAAqC,YAAA,KAAApB,IAAA,uBAAAC,MAAA,WAoDYlB,KAAKI,MAAMC,UACXL,KAAKI,MAAMC,SAASoC,YArDhC,CAAAxB,IAAA,SAAAC,MAAA,WA0DQ,OACI6B,EAAAzB,EAAA0B,cAAA,OAAKC,MAAO,CAAEC,OAAQ,mBAAoBC,OAAQ,QAASC,QAAS,kBAChEL,EAAAzB,EAAA0B,cAAA,UAAKhD,KAAKJ,MAAM+C,YAAYU,aAC5BN,EAAAzB,EAAA0B,cAAA,WACID,EAAAzB,EAAA0B,cAAA,UACIC,MAAO,CAAEK,MAAO,MAAOC,YAAa,KAAMC,gBAAiB,WAC3DC,QAAQ,YACRC,SAAU1D,KAAKI,MAAME,cACrBqD,QAAS3D,KAAKU,aACbV,KAAKI,MAAMC,SAAX,mBAAAuD,OAA2C5D,KAAKJ,MAAM+C,YAAYkB,UAAlE,MAELd,EAAAzB,EAAA0B,cAAA,UACIU,UAAW1D,KAAKI,MAAMC,UAAoC,IAAxBL,KAAKI,MAAMI,SAC7CyC,MAAO,CAAEK,MAAO,MAAOQ,WAAY,MACnCH,QAAS3D,KAAKa,QAHlB,YAQJkC,EAAAzB,EAAA0B,cAAA,WAEShD,KAAKI,MAAMI,UAAoC,IAAxBR,KAAKI,MAAMI,SAC/BuC,EAAAzB,EAAA0B,cAAA,OAAKC,MAAO,CAAEc,UAAW,SACrBhB,EAAAzB,EAAA0B,cAACgB,EAAA,EAAD,CAAMC,QAA+B,IAAtBjE,KAAKI,MAAMI,SAAgB0D,YAAY,IAAIC,YAAY,YACtEpB,EAAAzB,EAAA0B,cAAA,KAAGC,MAAO,CAAEmB,UAAW,SAAUjB,OAAQ,IAAMnD,KAAKI,MAAMK,kBAE5D,MAGdsC,EAAAzB,EAAA0B,cAAA,SAAIhD,KAAKJ,MAAM+C,YAAY0B,kBAvF3C3E,EAAA,CAA2B4E,aCNdC,EAAe,CAC1B,CACElB,YAAe,mBACfmB,aAAgB,eAChB5B,SAAkG,6FAClGC,QAAW,CAAC,MAAO,OACnBC,kBAAqB,KACrBe,UAAa,OACbY,MAAS,MACTJ,YAAe,wGAEjB,CACEhB,YAAe,OACfmB,aAAgB,WAChBX,UAAa,QACbjB,SAA8F,yFAC9FyB,YAAe,sIACfxB,QAAW,CACT,SACA,UACA,MACA,aACA,WACA,MACA,QACA,QACA,OACA,gBACA,eACA,YACA,gBACA,QACA,OACA,MACA,MACA,QACA,QACA,MACA,WACA,OACA,QACA,UACA,WACA,WACA,UACA,MACA,WACA,UACA,OACA,YACA,cACA,OACA,eACA,iBACA,aACA,YACA,gBACA,SACA,aACA,MACA,OACA,QACA,QACA,OACA,SACA,QACA,WACA,SACA,WACA,SACA,UACA,QACA,QACA,OACA,QACA,QACA,eACA,MACA,eACA,SACA,KACA,SACA,QACA,SACA,WACA,aACA,YACA,OACA,UACA,OACA,eACA,OACA,QACA,OACA,WACA,aACA,aACA,cAEFC,kBAAqB,QACrB2B,MAAS,SAEX,CACEpB,YAAe,SACfmB,aAAgB,YAChB5B,SAAqF,gFACrFiB,UAAa,QACbQ,YAAe,gLACfxB,QAAW,CACT,gBACA,mBACA,wBACA,wBACA,2BACA,2BACA,yBACA,uBAEFC,kBAAqB,QACrB2B,MAAS,SCzBEC,EAzFf,SAAA/E,GAEE,SAAA+E,IAAc,IAAA7E,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA0E,IACZ7E,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA4E,GAAAvE,KAAAH,QACK+B,SAAW4C,IAAMC,YACtB/E,EAAKO,MAAQ,CACXyE,MAAO,KAAMC,iBAAkB,CAAC,KAElCjF,EAAKkF,WAAalF,EAAKkF,WAAWpE,KAAhBb,OAAAc,EAAA,EAAAd,CAAAD,IAClBA,EAAKmF,kBAAoBnF,EAAKmF,kBAAkBrE,KAAvBb,OAAAc,EAAA,EAAAd,CAAAD,IAPbA,EAFhB,OAAAC,OAAAiB,EAAA,EAAAjB,CAAA4E,EAAA/E,GAAAG,OAAAkB,EAAA,EAAAlB,CAAA4E,EAAA,EAAAzD,IAAA,oBAAAC,MAAA,SAYoB+D,EAAOC,GACvB,IAAIJ,EAAmB9E,KAAKI,MAAM0E,iBAClCA,EAAiBG,GAASC,EAC1BlF,KAAK8B,SAAS,CAAEgD,uBAfpB,CAAA7D,IAAA,aAAAC,MAAA,SAkBaiE,GACT,IAAMN,EAAQO,IAAIC,gBAAgBF,EAAIG,OAAOC,MAAM,IAEnDvF,KAAK8B,SAAS,CAAE+C,QAAOC,iBADE,CAAC,QApB9B,CAAA7D,IAAA,SAAAC,MAAA,WAuBW,IAAAsE,EAAAxF,KACP,OACE+C,EAAAzB,EAAA0B,cAAA,OAAKC,MAAO,CAAEK,MAAO,QAASH,OAAQ,WACpCJ,EAAAzB,EAAA0B,cAAA,0CACAD,EAAAzB,EAAA0B,cAAA,6CAEED,EAAAzB,EAAA0B,cAAA,KAAGyC,KAAK,6CAAR,eAFF,0BAGgB1C,EAAAzB,EAAA0B,cAAA,KAAGyC,KAAK,4CAAR,mBAHhB,yDAMA1C,EAAAzB,EAAA0B,cAAA,UACED,EAAAzB,EAAA0B,cAAA,qFACAD,EAAAzB,EAAA0B,cAAA,kFAAyED,EAAAzB,EAAA0B,cAAA,KAAGyC,KAAK,6BAAR,gBAAzE,+FAEF1C,EAAAzB,EAAA0B,cAAA,WAEIuB,EAAamB,IAAI,SAAC/C,EAAasC,GAC7B,OACElC,EAAAzB,EAAA0B,cAAC2C,EAAD,CACEzD,mBAAoB,SAACgD,GAAWM,EAAKR,kBAAkBC,EAAOC,IAC9DvC,YAAaA,EACbZ,SAAUyD,EAAKzD,SACfd,IAAK0B,EAAYC,cAM3BG,EAAAzB,EAAA0B,cAAA,WACED,EAAAzB,EAAA0B,cAAA,SAAO4C,KAAK,OAAOC,SAAU7F,KAAK+E,WAAYe,GAAG,UAEnD/C,EAAAzB,EAAA0B,cAAA,OAAKC,MAAO,CAAE8C,SAAU,aACtBhD,EAAAzB,EAAA0B,cAAA,OAAKC,MAAO,CAAEK,MAAS,QAAU0C,IAAKhG,KAAK+B,SAAUkE,IAAKjG,KAAKI,MAAMyE,OAAS,UAAWqB,IAAI,wBAE3FlG,KAAKI,MAAM0E,iBAAiBY,IAAI,SAACS,EAAiBC,GAChD,OACErD,EAAAzB,EAAA0B,cAAA,OAAK/B,IAAKmF,GAEND,EAAgBT,IAAI,SAACW,EAAYC,GAC/B,OAAOvD,EAAAzB,EAAA0B,cAAA,OACL/B,IAAKqF,EACLrD,MAAO,CACL8C,SAAU,WACV7C,OAAM,aAAAU,OAAeW,EAAa6B,GAAY3B,OAC9CA,MAAOF,EAAa6B,GAAY3B,MAChCnB,MAAK,GAAAM,OAAuC,KAAjCyC,EAAWE,GAAKF,EAAWG,IAAjC,KACLC,OAAM,GAAA7C,OAAuC,KAAjCyC,EAAWK,GAAKL,EAAWM,IAAjC,KACNC,KAAI,GAAAhD,OAAqB,IAAhByC,EAAWG,GAAhB,KACJK,IAAG,GAAAjD,OAAqB,IAAhByC,EAAWM,GAAhB,KACHG,WAAY,SACX/D,EAAAzB,EAAA0B,cAAA,QAAMC,MAAO,CAAEG,QAAS,QAAUiD,EAAWU,mBAzExErC,EAAA,CAAyBJ,aCOL0C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOvE,EAAAzB,EAAA0B,cAACuE,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.87f5796f.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nimport { Line } from 'rc-progress'\n\nimport { load } from 'retinanetjs'\n\nexport class Model extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            detector: null,\n            togglingModel: false,\n            predicting: false,\n            progress: null,\n            progressMessage: ''\n        };\n        this.toggleModel = this.toggleModel.bind(this)\n        this.detect = this.detect.bind(this)\n        this.progressCallback = this.progressCallback.bind(this)\n    }\n\n    async detect() {\n        this.setState({ predicting: true })\n        let t0\n        if (process.env.NODE_ENV === 'development') {\n            t0 = performance.now();\n        }\n        const detections = await this.state.detector.detect(this.props.imageRef.current, 0.3)\n        if (process.env.NODE_ENV === 'development') {\n            var t1 = performance.now();\n            console.log(\"Prediction took \" + (t1 - t0) + \" milliseconds.\")\n        }\n        this.setState({ predicting: false })\n        this.props.predictionCallback(detections)\n    }\n\n    progressCallback(progress, progressMessage) {\n        this.setState({ progress, progressMessage })\n    }\n\n    async toggleModel() {\n        this.setState({ togglingModel: true })\n        let detector\n        if (this.state.detector) {\n            this.state.detector.dispose()\n            detector = null\n        } else {\n            detector = await load(\n                this.props.modelConfig.modelUrl,\n                this.props.modelConfig.classes,\n                this.props.modelConfig.preprocessingMode,\n                this.progressCallback\n            )\n        }\n        this.setState({ detector, togglingModel: false });\n    }\n\n    componentWillUnmount() {\n        if (this.state.detector) {\n            this.state.detector.dispose()\n        }\n    }\n\n    render() {\n        return (\n            <div style={{ border: \"2px dotted white\", margin: \"8px 0\", padding: \"0 8px 0px 8px\" }}>\n                <h2>{this.props.modelConfig.displayName}</h2>\n                <div>\n                    <button\n                        style={{ width: \"45%\", marginRight: \"5%\", backgroundColor: \"#EEEEEE\" }}\n                        variant=\"contained\"\n                        disabled={this.state.togglingModel}\n                        onClick={this.toggleModel}>\n                        {this.state.detector ? `Disable` : `Load (${this.props.modelConfig.modelSize})`}\n                    </button>\n                    <button\n                        disabled={!this.state.detector || this.state.progress !== 1}\n                        style={{ width: \"45%\", marginLeft: \"5%\" }}\n                        onClick={this.detect}\n                    >\n                        Predict\n                    </button>\n                </div>\n                <div>\n                    {\n                        (this.state.progress && this.state.progress !== 1) ?\n                            <div style={{ marginTop: '10px' }}>\n                                <Line percent={this.state.progress * 100} strokeWidth=\"4\" strokeColor=\"#D3D3D3\" />\n                                <p style={{ textAlign: 'center', margin: 0 }}>{this.state.progressMessage}</p>\n                            </div>\n                            : null\n                    }\n                </div>\n                <p>{this.props.modelConfig.description}</p>\n            </div>\n        );\n    }\n}\n","export const modelConfigs = [\n  {\n    'displayName': 'Cat/Dog Detector',\n    'backboneName': 'mobilenet224',\n    'modelUrl': process.env.NODE_ENV === 'development' ? 'mobilenet224_1_0_oxfordcatdog/model.json' : 'https://storage.googleapis.com/retinanetjs/models/mobilenet224_1_0_oxfordcatdog/model.json',\n    'classes': ['dog', 'cat'],\n    'preprocessingMode': 'tf',\n    'modelSize': '53MB',\n    'color': 'red',\n    'description': 'A MobileNet224 model trained to detect dogs and cats. it was trained on the Oxford-IIIT Pet Dataset.'\n  },\n  {\n    'displayName': 'COCO',\n    'backboneName': 'resnet50',\n    'modelSize': '150MB',\n    'modelUrl': process.env.NODE_ENV === 'development' ? 'resnet50_coco_best_v2.1.0/model.json' : 'https://storage.googleapis.com/retinanetjs/models/resnet50_coco_best_v2.1.0/model.json',\n    'description': 'The pre-trained object detector with a ResNet50 backbone provided by the fizyr team. It detects the 80 classes in the COCO dataset.',\n    'classes': [\n      'person',\n      'bicycle',\n      'car',\n      'motorcycle',\n      'airplane',\n      'bus',\n      'train',\n      'truck',\n      'boat',\n      'traffic light',\n      'fire hydrant',\n      'stop sign',\n      'parking meter',\n      'bench',\n      'bird',\n      'cat',\n      'dog',\n      'horse',\n      'sheep',\n      'cow',\n      'elephant',\n      'bear',\n      'zebra',\n      'giraffe',\n      'backpack',\n      'umbrella',\n      'handbag',\n      'tie',\n      'suitcase',\n      'frisbee',\n      'skis',\n      'snowboard',\n      'sports ball',\n      'kite',\n      'baseball bat',\n      'baseball glove',\n      'skateboard',\n      'surfboard',\n      'tennis racket',\n      'bottle',\n      'wine glass',\n      'cup',\n      'fork',\n      'knife',\n      'spoon',\n      'bowl',\n      'banana',\n      'apple',\n      'sandwich',\n      'orange',\n      'broccoli',\n      'carrot',\n      'hot dog',\n      'pizza',\n      'donut',\n      'cake',\n      'chair',\n      'couch',\n      'potted plant',\n      'bed',\n      'dining table',\n      'toilet',\n      'tv',\n      'laptop',\n      'mouse',\n      'remote',\n      'keyboard',\n      'cell phone',\n      'microwave',\n      'oven',\n      'toaster',\n      'sink',\n      'refrigerator',\n      'book',\n      'clock',\n      'vase',\n      'scissors',\n      'teddy bear',\n      'hair drier',\n      'toothbrush'\n    ],\n    'preprocessingMode': 'caffe',\n    'color': 'green'\n  },\n  {\n    'displayName': 'Purify',\n    'backboneName': 'resnet101',\n    'modelUrl': process.env.NODE_ENV === 'development' ? 'resnet101_purify/model.json' : 'https://storage.googleapis.com/retinanetjs/models/resnet101_purify/model.json',\n    'modelSize': '220MB',\n    'description': 'A resnet101 model trained to detect explicit content. It is generously provided by the CTI community team. Their work is also available at https://pury.fi [content warning].',\n    'classes': [\n      'exposed belly',\n      'exposed buttocks',\n      'exposed female breast',\n      'covered female breast',\n      'exposed female genitalia',\n      'covered female genitalia',\n      'exposed male genitalia',\n      'exposed male breast'\n    ],\n    'preprocessingMode': 'caffe',\n    'color': 'blue'\n  }\n]","import React, { Component } from 'react';\n\nimport { Model } from './Model'\nimport { modelConfigs } from './modelConfigs';\n\nexport class App extends Component {\n\n  constructor() {\n    super()\n    this.imageRef = React.createRef();\n    this.state = {\n      image: null, annotationGroups: [[]]\n    }\n    this.handleFile = this.handleFile.bind(this)\n    this.handlePredictions = this.handlePredictions.bind(this)\n  }\n\n  handlePredictions(index, anns) {\n    let annotationGroups = this.state.annotationGroups\n    annotationGroups[index] = anns\n    this.setState({ annotationGroups })\n  }\n\n  handleFile(evt) {\n    const image = URL.createObjectURL(evt.target.files[0]);\n    const annotationGroups = [[]]\n    this.setState({ image, annotationGroups })\n  }\n  render() {\n    return (\n      <div style={{ width: \"500px\", margin: \"0 auto\" }}>\n        <h1>RetinaNetJS Object Detection</h1>\n        <p>\n          This page demonstrates use of the\n          <a href=\"https://www.npmjs.com/package/retinanetjs\">retinanetjs</a> package\n          for deploying <a href=\"https://github.com/fizyr/keras-retinanet\">keras-retinanet</a> models for inference in the browser. To use,\n          simply:\n        </p>\n        <ol>\n          <li>Enable one or more models (note the download sizes can be significant).</li>\n          <li>Hit predict. Note that the inference all occurs in the browser using <a href=\"https://js.tensorflow.org\">tensorflowjs</a>, so no data is sent to a server. Each detector's predictions appear in a different color.</li>\n        </ol>\n        <div>\n          {\n            modelConfigs.map((modelConfig, index) => {\n              return (\n                <Model\n                  predictionCallback={(anns) => { this.handlePredictions(index, anns) }}\n                  modelConfig={modelConfig}\n                  imageRef={this.imageRef}\n                  key={modelConfig.modelUrl}\n                ></Model>\n              )\n            })\n          }\n        </div>\n        <div>\n          <input type=\"file\" onChange={this.handleFile} id=\"file\" />\n        </div>\n        <div style={{ position: \"relative\" }}>\n          <img style={{ \"width\": \"100%\" }} ref={this.imageRef} src={this.state.image || \"dog.jpg\"} alt=\"your labeled upload\" />\n          {\n            this.state.annotationGroups.map((annotationGroup, groupIndex) => {\n              return (\n                <div key={groupIndex}>\n                  {\n                    annotationGroup.map((annotation, annotationIndex) => {\n                      return <div\n                        key={annotationIndex}\n                        style={{\n                          position: \"absolute\",\n                          border: `5px solid ${modelConfigs[groupIndex].color}`,\n                          color: modelConfigs[groupIndex].color,\n                          width: `${(annotation.x2 - annotation.x1) * 100}%`,\n                          height: `${(annotation.y2 - annotation.y1) * 100}%`,\n                          left: `${annotation.x1 * 100}%`,\n                          top: `${annotation.y1 * 100}%`,\n                          fontWeight: \"bold\"\n                        }}><span style={{ padding: \"5px\" }}>{annotation.label}</span></div>\n                    })\n                  }\n                </div>\n              )\n            })\n          }\n        </div>\n      </div >\n\n    )\n  }\n}\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}